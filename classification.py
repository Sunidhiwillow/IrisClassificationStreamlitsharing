# -*- coding: utf-8 -*-
"""Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kSDQaEFNqOoU76AbzcmdszGoRU0AFQCH
"""

import pickle
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix,classification_report

df = pd.read_csv("IRIS.csv")

df

df.describe()

df.columns

df.isna().sum()

df.info()

df.shape

hist1 = "sepal_length"
df[hist1].hist()
plt.suptitle(hist1)
plt.show()

hist2 = "sepal_width"
df[hist2].hist()
plt.suptitle(hist2)
plt.show()

hist3 = "petal_length"
df[hist3].hist()
plt.suptitle(hist3)
plt.show()

hist4 = "petal_width"
df[hist4].hist()
plt.suptitle(hist4)
plt.show()

col1 = "sepal_length"
sns.relplot(x=col1, y="species", hue ="species", data=df )
plt.suptitle(col1)
plt.show()

col2 = "sepal_width"
sns.relplot(x=col2, y="species", hue ="species", data=df )
plt.suptitle(col2)
plt.show()

col3 = "petal_length"
sns.relplot(x=col3, y="species", hue ="species", data=df )
plt.suptitle(col3)
plt.show()

col4 = "petal_width"
sns.relplot(x=col4, y="species", hue ="species", data=df )
plt.suptitle(col4)
plt.show()

sns.pairplot(df, hue = "species")

le = LabelEncoder()
df['species'] = le.fit_transform(df['species'])
df.head(150)

df['species'].unique()

df_train, df_test = train_test_split(df,test_size=0.25)

X_train = df_train.drop(columns=['species']).values
Y_train = df_train['species'].values

X_test = df_test.drop(columns=['species']).values
Y_test = df_test['species'].values

X_test.shape

df['species']

######### MANUAL MODELLING BASED ON PAIRPLOTS USING PETAL_LENGTH
def single_feature_prediction(petal_length):
  if petal_length < 2.7:
    return 0
  elif petal_length< 4.5:
    return 1
  else:
    return 2

manual_prediction = [single_feature_prediction(val) for val in X_train[:,3]]

manual_prediction == Y_train

model1 = LogisticRegression(max_iter = 1000)
model1.fit(X_train,Y_train)

prediction = model1.predict(X_test)
print('Accuracy:', accuracy_score(prediction,Y_test))

confusion_mat = confusion_matrix(Y_test, prediction)
print("Confusion_matrix:\n",confusion_mat)
print(classification_report(Y_test, prediction))

#####USING KNN CLASSIFIER
from sklearn.neighbors import KNeighborsClassifier
model2 = KNeighborsClassifier(n_neighbors = 5)
model2.fit(X_train,Y_train)
prediction2 = model2.predict(X_test)
#print(prediction2)
print("Accuracy_score: ", accuracy_score(prediction2,Y_test))

##### DECISION TREES
from sklearn import tree
model3 = tree.DecisionTreeClassifier()
model3.fit(X_train,Y_train)
prediction3 = model3.predict(X_test)
print("Accuracy_score: ", accuracy_score(prediction3, Y_test))

pickle.dump(model1,open('model_logisticreg.pkl','wb'))
pickle.dump(model2,open('model_KNN.pkl','wb'))
pickle.dump(model3,open('model_decisiontree.pkl','wb'))

#sepal_length = float(input("enter sepal_length(cm): "))
#sepal_width = float(input("enter sepal_width(cm): "))
#petal_length = float(input("enter petal_length(cm): "))
#petal_width = float(input("enter petal_width(cm): "))
#input = np.array([[sepal_length, sepal_width,petal_length,petal_width]])
#predicted_species = model3.predict(input)
#print("Predicted_species: ", predicted_species[0])

!pip install streamlit

import streamlit as st
import pickle
import numpy as np

logisticreg_model = pickle.load(open('model_logisticreg.pkl','rb'))
KNN_model = pickle.load(open('model_KNN.pkl','rb'))
DecisionTree_model = pickle.load(open('model_decisiontree.pkl','rb'))

def classify(num):
  if num < 0.5:
    return 'sentosa'
  elif num< 1.5:
    return 'versicolor'
  else:
    return 'verginica'

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# 
# st.title("StreamlitDeployment")
# html_temp = """
# <div_style ="background-color:teal ;padding:10px">
# <h2 style ="color:white text-align:centre;">Iris Classification</h2>
# </div>
# """
# st.markdown(html_temp,unsafe_allow_html = True)
# activities = ['logistic Regression', 'KNN', 'DecisionTree']
# option = st.sidebar.selectbox("Which model would you like to use?", activities)
# st.subheader(option)
# st.spinner("Hello")
# sepal_length = st.slider('Select sepal length', 0.0,10.0)
# sepal_width = st.slider('Select sepal width', 0.0,10.0)
# petal_length = st.slider('Select petal length', 0.0,10.0)
# petal_width = st.slider('Select petal width', 0.0,10.0)
# input = np.array([[sepal_length, sepal_width,petal_length,petal_width]])
# if st.button('Classify'):
#   if option=='logistic Regression':
#     st.success(classify((model1.predict(input))))
#   elif option =='KNN':
#     st.success(classify((model2.predict(input))))
#   else:
#     st.success(classify((model3.predict(input))))

#!pip install pyngrok

#from pyngrok import ngrok

#!ngrok authtoken 2U1jORfsNw52SZNM9n08bdRo9zt_5td1WXbqGbFSw4FzuU86v

#from pyngrok import ngrok
#url = ngrok.connect(port=8501)
#url

#!nohup streamlit run app.py &

#from pyngrok import ngrok
#url = ngrok.connect(port=8501)
#url

import sys
print(sys.modules.keys())

!pip install pipreqs

!pipreqs

